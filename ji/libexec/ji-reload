#!/usr/bin/env bash
# Usage: ji reload <ENVIRONMENT> <COMPONENTS> <COMPONENT_PREFIX>
# Usage: ji reload <local/staging/production> <all/component1,component2> <component-prefix>
# Summary: Reload components on local/remote Kubernetes Cluster
# Help: `ji reload` reload components on local/remote Kubernetes Cluster
#
# example: `ji reload local all dev` => will reload components mentioned in `.ji-all-components` file which are not commented to local cluster with `dev` prefix.
# example: `ji reload staging <project-name>,<project-name> stg` => will reload components passed as arguements on cli to remote cluster with `stg` prefix.

ACTION=reload
# imported for coloring
source rainbow.sh

# import configuration
ALL_SUPPORT=true
MULTI_INPUT=true
PRODUCTION_SUPPORT=true
source config.sh

if [[ $use_context == $local_context ]]; then
    echo "$(echogreen 'Reloading Components Locally:')"
else
    echo "$(echogreen 'Reloading Components on Remote Kubernetes Cluster:')"
fi


for component in "${entered_components[@]}"; do
    component=$(echo $component | tr -d "[:space:]")
    echo $(echoyellow $(printf '=%.0s' {1..100}))
    echo "$(echogreen $component)"
    IFS=' ' read -ra DEPLOYEMNLIST <<< "$(kubectl get deployments -o=jsonpath='{.items[*].metadata.name}' -l release=$component_prefix-$component --context $use_context -n $use_namespace)"
    if [[ -z ${DEPLOYEMNLIST[@]} ]]; then
        echo "$(echopurple $component_prefix-$entered_components) $(echored 'is not running/deployed.')"
        exit 1
    fi
    for deploy in "${DEPLOYEMNLIST[@]}"; do
        kubectl patch deployment $deploy -p '{"spec":{"template":{"spec":{"containers":[{"name":'"\"$component\""',"env":[{"name":"RESTART_","value":"'$(date +%s)'"}]}]}}}}' --context $use_context -n $use_namespace
        if [ $? -ne 0 ]; then
            echo "$(echored 'Reload failed')"
            exit 1
        fi
    done

    echo $(echogreen "Successfully Reloaded ${component} on ${use_namespace} with prefix ${component_prefix} by $(git config user.name)")
    if [[ $slacking == true ]]; then
        echo -n $(echogreen "Slacking: ")
        curl -X POST -H 'Content-type: application/json' --data \
            "{\"text\":\"Successfully Reloaded *$component* on *$use_namespace* with prefix *$component_prefix* by *$(git config user.name)*\"}" \
            $SLACK_WEBHOOK_URL
        echo ""
    fi
    if [[ $prod_slacking == true ]]; then
        echo -n $(echogreen "Prod Slacking: ")
        curl -X POST -H 'Content-type: application/json' --data \
            "{\"text\":\"Successfully Reloaded *$component* on *$use_namespace* with prefix *$component_prefix* by *$(git config user.name)*\"}" \
            $PROD_SLACK_WEBHOOK_URL
        echo ""
    fi
done
echo $(echoyellow $(printf '=%.0s' {1..100}))
unset COMPONENT_PREFIX
